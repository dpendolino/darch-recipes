#!/bin/bash
set -e

. ../common

# I compile the AUR images myself, to speed up the build.
echo -e "[dpendolino]\nServer = https://github.com/dpendolino/binary-repos/releases/download/arch-linux-release/\nSigLevel = Optional TrustAll" >> /etc/pacman.conf

# Initialize the keys
pacman-key --init
pacman-key --populate archlinux

# Resync the database
pacman -Sy --noconfirm
# Update gpg keys before we install anything else.
pacman -S --noconfirm archlinux-keyring
# Now update everything.
pacman -Syu --noconfirm

# Let's update the mirrors.
# Note that we append the list, because my experience with the repo square-r00t (in godarch/arch) has been really good.
install_packages wget sed
wget -q -O- https://www.archlinux.org/mirrorlist/\?country\=US\&protocol\=http\&protocol\=https\&ip_version\=4\&use_mirror_status\=on \
  | sed -e "s/#Server/Server/g" \
  >> /etc/pacman.d/mirrorlist

# Run base install, with dev tools. The "bootstrap" fs doesn't contain everything, just what you need to bootstrap.
install_packages base base-devel

# makepkg won't allow you to run as root, because it could damage your system.
# This is correct, but we don't modify existing systems, we build new ones.
# The root stuff is more of a hindrance than a benefit when using darch.
install_packages patch
curl https://gist.githubusercontent.com/pauldotknopf/ff8e986225ab2f264acea1a5bb0c6c5a/raw/66e39c98b1a87cb40abfd489dba53bb5a8625186/makepkg.patch | patch /usr/bin/makepkg

# Edit makepkg.conf
sed -i "s/#MAKEFLAGS=\"-j2\"/MAKEFLAGS=\"-j$(nproc)\"/"  /etc/makepkg.conf

# Now that we can run makepkg with root, let's install our aur helper
install_aur_helper

# Install Darch
install_aur_packages darch
# We don't need grub as a bootloader, but we use
# their helper scripts in Darch to generate menu entries.
install_packages grub
# Enable containerd, which was brought in as a dependency.
systemctl enable containerd
# I store containerd on /var/lib/darch/containerd, because /var/lib/darch
# is an external partition. This way, images are persisted across boots.
mkdir -p /etc/containerd
echo "root = \"/var/lib/darch/containerd\"" > /etc/containerd/config.toml

# Enable systemd networking.
cp wired.network /etc/systemd/network/
systemctl enable systemd-networkd
systemctl enable systemd-resolved

# Necessary Packages
install_packages \
  tcpdump \
  nmap \
  rsync \
  htop \
  iotop \
  atop \
  linux-headers \
  net-tools \
  bind-tools \
  fzf \

install_aur_packages hstr-git

  # Add encrypt hook to mkinitcpio.conf
sed -i 's/HOOKS="base udev autodetect modconf block keyboard keymap filesystems resume"/HOOKS="base udev autodetect modconf block encrypt lvm2 keyboard keymap filesystems resume fsck"/' /etc/mkinitcpio.conf

# Install ZFS
cat >> /etc/pacman.conf << EndOfMessage
[archzfs]
Server = http://archzfs.com/\$repo/x86_64
EndOfMessage

# add archzfs keys
GPG_KEY='5E1ABF240EE7A126'
( pacman-key --keyserver ha.pool.sks-keyservers.net  --recv-keys "$GPG_KEY" || \
    pacman-key --keyserver pgp.mit.edu --recv-keys "$GPG_KEY" || \
  pacman-key --keyserver keyserver.pgp.com --recv-keys "$GPG_KEY" )

pacman-key --keyserver pool.sks-keyservers.net --lsign-key 5E1ABF240EE7A126

# Downgrade kernel to 14.15.1-2
cd /tmp
kernel="linux-4.15.3-2-x86_64.pkg.tar.xz"
headers="linux-headers-4.15.3-2-x86_64.pkg.tar.xz"
wget https://archive.archlinux.org/packages/l/linux/"$kernel"
wget https://archive.archlinux.org/packages/l/linux-headers/"$headers"
pacman -U --noconfirm "$kernel" "$headers"

# update and install
pacman -Syy
install_packages spl-linux zfs-linux zfs-utils-common spl-utils-common
install_packages zfs-auto-snapshot-git

# enable zfs service
mkdir /mnt/HeartOfGold
systemctl enable zfs-import-cache.service \
  zfs-import-scan.service \
  zfs-mount.service  \
  zfs-auto-snapshot-daily.timer \
  zfs-auto-snapshot-monthly.timer \
  zfs-auto-snapshot-weekly.timer

# Rebuild initramfs
# mkinitcpio -p linux
